name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  commitlint:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=./nix
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: ibis-substrait
          extraPullNames: nix-community,poetry2nix,ibis

      - name: commitlint
        run: nix run -L 'nixpkgs#commitlint' -- --from=${{ github.event.pull_request.base.sha }} --to=${{ github.sha }} --verbose
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=./nix
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: ibis-substrait
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix,ibis

      - run: nix develop --ignore-environment -f shell.nix -c pre-commit run --all-files
  nix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "38"
          - "39"
          - "310"
          - "311"
        include:
         - os: macos-latest
           python-version: "310"
    steps:
      - uses: actions/checkout@v3

      - uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=./nix
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: ibis-substrait
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix,ibis

      - name: build package and run tests
        run: |
          version='${{ matrix.python-version }}'
          nix build ".#ibisSubstrait${version//./}" --fallback --keep-going --print-build-logs
  poetry_ibis:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "3.8"
          - "3.10"
        ibis-version:
          - "3.2"
          - "4.1"
          - "5.1"
        include:
         - os: windows-latest
           python-version: "3.10"
           ibis-version: "4.1"


    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - run: pip3 install 'poetry<1.4'
      - run: poetry install --sync
      - run: poetry run pip install 'ibis-framework==${{ matrix.ibis-version }}'
      - run: poetry run pytest
  poetry_ibis_pyarrow_nightly:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "3.8"
          - "3.10"
        ibis-version:
          - "3.2"
          - "4.1"

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - run: pip3 install 'poetry<1.4'
      - run: poetry install --sync
      - run: poetry run pip install 'ibis-framework==${{ matrix.ibis-version }}'
      - run: poetry run pip install --extra-index-url https://pypi.fury.io/arrow-nightlies --pre -U pyarrow
      - run: poetry run pytest
  dry-run-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=./nix
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: ibis-substrait
          extraPullNames: nix-community,poetry2nix,ibis

      - name: Configure git info
        run: |
          set -euo pipefail

          # not incredibly important what user we use here
          #
          # we're making a commit in a temporary worktree that is thrown away
          # if the process exits successfully
          #
          # git requires user information to make commits
          git config user.name 'ibis-squawk-bot[bot]'
          git config user.email 'ibis-squawk-bot[bot]@users.noreply.github.com'

      - name: dry run semantic-release
        run: ./ci/release/dry_run.sh

  check-poetry-lock:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: install poetry
        run: pip3 install 'poetry<1.4'

      - name: verify lockfile
        run: poetry lock --check
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    needs:
      - nix
      - poetry_ibis
      - pre-commit
      - dry-run-release
      - check-poetry-lock
    steps:
      - uses: tibdex/github-app-token@v1
        id: generate_token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=./nix
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: ibis-substrait
          extraPullNames: nix-community,poetry2nix,ibis

      - name: run semantic-release
        run: ./ci/release/run.sh
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
